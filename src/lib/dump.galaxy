
int queuedScopesLen = 0;
int dt_queuedScopes;
int dt_printedScopes;

void dump_start(); // This is autogenerated

void dump_setup_output(){
	TriggerDebugOutputEnable(true);
	TriggerDebugEnableType(5, true);
	TriggerDebugSetTypeFile(5, "game_data_dump");
}

void dump_output(string v){
	TriggerDebugOutput(5, StringToText(v), false);
}

string b2s(bool v){
	if(v){
		return "true";
	}else{
		return "false";
	}
}

string dump_json_bool(string key, bool value){
	return "\"" + key + "\": " + b2s(value) + ", ";
}

string dump_json_string(string key, string value){
	return "\"" + key + "\": \"" + value + "\", "; // Needs escaping...
}

string category_to_string(int v){
	if(v == c_catalogFieldTypeStruct){ return "Struct"; }
	if(v == c_catalogFieldTypeString){ return "String"; }
	if(v == c_catalogFieldTypeEnum){ return "Enum"; }
	if(v == c_catalogFieldTypeFixed){ return "Fixed"; }
	if(v == c_catalogFieldTypeFlags){ return "Flags"; }
	if(v == c_catalogFieldTypeFloat){ return "Float"; }
	if(v == c_catalogFieldTypeFourCC){ return "FourCC"; }
	if(v == c_catalogFieldTypeIntSigned){ return "IntSigned"; }
	if(v == c_catalogFieldTypeIntUnsigned){ return "IntUnsigned"; }
	if(v == c_catalogFieldTypeCatalogLink){ return "CatalogLink"; }
	return "Unknown";
}

void dump_scope(string scope){
	int i;
	int n = CatalogFieldCount(scope);
	string field;
	
	if(DataTableInstanceGetBool(dt_printedScopes, scope)){
		return;
	}
	
	DataTableInstanceSetBool(dt_printedScopes, scope, true);
	
	dump_output("\"" + scope + "\": {");
	
	for(i = 0; i < n; i += 1){
		field = CatalogFieldGet(scope, i);
		
		if(CatalogFieldTypeCategory(scope, field) == c_catalogFieldTypeStruct){
			DataTableInstanceSetBool(dt_queuedScopes, CatalogFieldType(scope, field), true);
		}
		
		dump_output("\"" + field + "\": {"
			+ dump_json_bool("array", CatalogFieldIsArray(scope, field))
			+ dump_json_string("type", CatalogFieldType(scope, field))
			+ dump_json_string("category", category_to_string(CatalogFieldTypeCategory(scope, field)))
			+ "},"
		);
	}
	
	dump_output("},");
}

native void DataTableInstanceValueRemove(int lp_1, string lp_2);

void dump_queued_scopes(){
	string scope;
	
	while(DataTableInstanceValueCount(dt_queuedScopes) > 0){
		scope = DataTableInstanceValueName(dt_queuedScopes, 1); // 1 indexed...
		DataTableInstanceValueRemove(dt_queuedScopes, scope);
		dump_scope(scope);
	}
}

void dump(){
	
	DataTableInstanceCreate();
	dt_queuedScopes = DataTableInstanceLastCreated();
	DataTableInstanceCreate();
	dt_printedScopes = DataTableInstanceLastCreated();
	
	dump_setup_output();
	dump_start();
}
